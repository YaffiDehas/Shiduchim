import * as React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import Box from '@mui/material/Box';
import DeleteIcon from '@mui/icons-material/Delete';
import SaveIcon from '@mui/icons-material/Save';
import { DataGridPro, GridActionsCellItem } from '@mui/x-data-grid-pro';
import { LicenseInfo } from '@mui/x-license-pro';
import Header from '../Header/Header';
import './CheckingNewRegistered.css';
import { useEffect } from 'react';
import axios from 'axios';
import { loadNewCandidates, loadNewMatchMakers } from '../../store/manager/managerActions';

LicenseInfo.setLicenseKey('x0jTPl0USVkVZV0SsMjM1kDNyADM5cjM2ETPZJVSQhVRsIDN0YTM6IVREJ1T0b9586ef25c9853decfa7709eee27a1e');

const handleSaveClick = (id) => () => {
    // TODO: שמירת המועמד/השדכן בדאטה בייס וכן עדכון ברידקס של רשימת המועמדים
    console.log('save', id)
};

const handleDeleteClick = (id) => () => {
    // TODO: מחיקת המועמד/השדכן שנרשם בדאטבה בייס כולל עדכון ברידדקס
    console.log('delete', id)
};

const columns = [
    { field: 'id', headerName: 'ID', width: 90 },
    {
        field: 'firstName',
        headerName: 'שם פרטי',
        width: 150,
        editable: true,
    },
    {
        field: 'lastName',
        headerName: 'שם משפחה',
        width: 150,
        editable: true,
    },
    {
        field: 'email',
        headerName: 'מייל',
        type: 'number',
        width: 110,
        editable: true,
    },
    {
        field: 'area',
        headerName: 'עיר',
        type: 'number',
        width: 110,
        editable: true,
    },
    {
        field: 'age',
        headerName: 'גיל',
        type: 'number',
        width: 90,
        editable: true,
    },
    {
        field: 'phone',
        headerName: 'טלפון',
        type: 'number',
        width: 110,
        editable: true,
    },

    {
        field: 'actions',
        type: 'actions',
        headerName: 'אישור והוספה למאגר/מחיקה ושליחת הודעה',
        width: 500,
        cellClassName: 'actions',
        getActions: ({ id }) => {
            return [
                <GridActionsCellItem
                    icon={<SaveIcon />}
                    label="Save"
                    sx={{
                        color: 'primary.main',
                    }}
                    onClick={handleSaveClick(id)}
                />,
                <GridActionsCellItem
                    icon={<DeleteIcon />}
                    label="Delete"
                    onClick={handleDeleteClick(id)}
                    color="inherit"
                />,
            ];
        },
    }
];

export default function CheckingNewRegistered() {

    const newCandidates = useSelector((state) => state.candidates.newCandidates);
    const newMatchmakers = useSelector((state) => state.matchmakers.newMatchmakers);
    const currentUser = useSelector((state) => state.user.currentUser);
    const userTypePage = "matchMaker" // פה ישמר אם הדף הוא מועמדים חדשים או שדכנים חדשים
    const rows = userTypePage === "matchMaker" ? newMatchmakers : newCandidates;
    const [rowModesModel, setRowModesModel] = React.useState({});
    const dispatch = useDispatch();


    useEffect(() => {
        //שליפת מועמדים שביצעו הרשמה ולא אושרו
        const getNewCandidatesFromServer = async () => {
            try {
                const resp = await axios.get(`http://localhost:5000/api/shiduchim/manager/candidates-cards/`, {
                    headers: { 'x-access-token': currentUser.token }
                });
                const allCandidates = resp.data.candidates;
                const newCandidates = allCandidates.filter(cand => cand.isApproved === false); //שליפת כל המועמדים שנשרמו ולא אושרו
                dispatch(loadNewCandidates(newCandidates));
            } catch (error) {
                console.error('Error retrieving messages:', error);
            }
        }

        //שליפת שדכנים שביצעו הרשמה ולא אושרו
        const getNewMatchMakerFromServer = async () => {
            try {
                const resp = await axios.get(`http://localhost:5000/api/shiduchim/manager/matchmakers-cards`, {
                    headers: { 'x-access-token': currentUser.token }
                });
                const allMatchmakers = resp.data.matchmakers;
                const newMatchmakers = allMatchmakers.filter(match => match.isApproved === false); //שליפת כל השדכנים שנרשמו ולא אושרו
                dispatch(loadNewMatchMakers(newMatchmakers));
            } catch (error) {
                console.error('Error retrieving messages:', error);
            }
        }

        getNewCandidatesFromServer();
        getNewMatchMakerFromServer()
    }, [])

    return (
        <>
            <Header />
            <div className='CheckingNewRegistered'>
                <h4>{userTypePage && userTypePage === "matchMaker" ? 'בדיקת שדכניות חדשות' : 'בדיקת מועמדים חדשים'}</h4>
                <Box sx={{ height: 400, width: '100%' }}>
                    <DataGridPro
                        rows={rows}
                        columns={columns}
                        editMode="row"
                        rowModesModel={rowModesModel}
                    />
                </Box>
            </div>
        </>
    );
}